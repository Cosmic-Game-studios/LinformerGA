<?php

namespace Modules\Admin\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Str;
use Carbon\Carbon;

class ErrorLogController
{
    /** Log-Ordner als relativer Pfad (endet stets mit Slash/Backslash) */
    private string $logDir = 'storage' . DIRECTORY_SEPARATOR . 'logs' . DIRECTORY_SEPARATOR;

    /** aktuell angezeigte Log-Datei (relativer Name) */
    private string $currentFile = '';

    public function __construct()
    {
        // Ordner bei Bedarf anlegen (macht keine absoluten Pfade!)
        if (! is_dir($this->logDir)) {
            mkdir($this->logDir, 0775, true);
        }
    }

    // ───────────────────────────────────────────────────────── INDEX
    public function index(Request $request)
    {
        /* 1) Sämtliche .log-Dateien einsammeln (ohne Regex-Filter) */
        $files = collect(File::glob($this->logDir . '*.log'))
            ->map(fn ($p) => new \SplFileInfo($p))
            ->sortByDesc(fn ($f) => $f->getMTime())   // neueste zuerst
            ->values();

        /* 2) Gewünschte Datei bestimmen: ?file=… oder erste in Liste */
        $this->currentFile = trim(basename($request->query('file', '')));
        if ($this->currentFile === '' && $files->isNotEmpty()) {
            $this->currentFile = $files->first()->getFilename();
        }

        /* 3) Vollständigen Pfad RELATIV zusammenbauen und prüfen */
        $path = $this->logDir . $this->currentFile;
        abort_unless(File::isFile($path), 404);

        /* 4) Inhalt lesen, neueste Zeile nach oben, Level erkennen */
        $lines = collect(preg_split('/\r?\n/', File::get($path)))
            ->filter()
            ->reverse()
            ->values()
            ->map(function (string $line) {
                preg_match('/\.(?<lvl>[A-Z]+):/', $line, $m);
                return [
                    'raw'   => $line,
                    'level' => strtolower($m['lvl'] ?? 'info'),
                ];
            });

        /* 5) Pagination (100 Zeilen pro Seite) */
        $perPage  = 100;
        $page     = LengthAwarePaginator::resolveCurrentPage();
        $paginated = new LengthAwarePaginator(
            $lines->forPage($page, $perPage),
            $lines->count(),
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );

        return view('logviewer.index', [
            'files'       => $files,
            'currentFile' => $this->currentFile,
            'logs'        => $paginated,
        ]);
    }

    // ─────────────────────────────────────────────────────── DOWNLOAD
    public function download(Request $request)
    {
        $file = trim(basename($request->query('file', '')));
        $path = $this->logDir . $file;

        abort_unless(
            $file !== '' &&
            Str::endsWith(Str::lower($file), '.log') &&
            File::isFile($path),
            404
        );

        return Response::download($path, $file, ['Content-Type' => 'text/plain']);
    }

    // ────────────────────────────────────────────────────────── CLEAR
    public function clear()
    {
        $today = Carbon::today()->format('Y-m-d');

        collect(File::glob($this->logDir . '*.log'))
            ->filter(fn ($p) => ! Str::contains($p, $today))
            ->each(fn ($p) => File::delete($p));

        return back()->with('status', 'Alle älteren Log-Dateien wurden gelöscht.');
    }
}