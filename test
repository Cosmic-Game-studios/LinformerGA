<?php

namespace Modules\Admin\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Str;
use Carbon\Carbon;
use SplFileObject;

class ErrorLogController
{
    private string $logDir;
    private string $currentFile = '';

    // Maximal wie viele Zeilen tailen, bevor wir abbrechen
    private int $maxTailLines = 10000;

    public function __construct()
    {
        $this->logDir = rtrim(
            base_path('storage' . DIRECTORY_SEPARATOR . 'logs'),
            '\\/'
        ) . DIRECTORY_SEPARATOR;

        abort_unless(is_dir($this->logDir), 500, "Log-Verzeichnis fehlt: {$this->logDir}");
    }

    public function index(Request $request)
    {
        // 1) Alle Log-Dateien listen und Datumsextrakt
        $files = collect(File::glob($this->logDir . 'laravel-*.log'))
            ->map(fn($p) => new \SplFileInfo($p))
            ->sortByDesc(fn($f) => $f->getMTime())
            ->values();

        // Liste verfügbarer Daten (YYYY-MM-DD)
        $availableDates = $files->map(fn($f) => substr($f->getFilename(), 8, 10))->unique()->sort()->values();

        // 2) Aktuelle Datei bestimmen
        $dateParam = $request->query('date');
        if ($dateParam && in_array($dateParam, $availableDates->all(), true)) {
            $this->currentFile = "laravel-{$dateParam}.log";
        } else {
            $this->currentFile = $files->first()->getFilename();
            $dateParam = substr($this->currentFile, 8, 10);
        }

        // 3) Pfad & Existenz prüfen
        $path = $this->logDir . $this->currentFile;
        abort_unless(File::isFile($path), 404);

        // 4) Einträge-pro-Seite
        $perPageOptions = [50, 100, 200, 500];
        $perPage = (int)$request->query('per_page', 100);
        if (!in_array($perPage, $perPageOptions, true)) {
            $perPage = 100;
        }

        // 5) Zeilen lesen (Tail, falls groß)
        $rawLines = $this->getTailLines($path, $this->maxTailLines);
        $lines = collect($rawLines)
            ->map(fn($l) => trim($l))
            ->filter()
            ->reverse()
            ->values()
            ->map(fn(string $line) => [
                'raw'   => $line,
                'level' => strtolower(preg_match('/\.(?<lvl>[A-Z]+):/', $line, $m) ? $m['lvl'] : 'info'),
            ]);

        // 6) Pagination
        $page = LengthAwarePaginator::resolveCurrentPage();
        $logs = new LengthAwarePaginator(
            $lines->forPage($page, $perPage),
            $lines->count(),
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );

        // 7) Rückgabe
        return view('admin::errorlog.index', [
            'files'           => $files,
            'availableDates'  => $availableDates,
            'currentDate'     => $dateParam,
            'currentFile'     => $this->currentFile,
            'logs'            => $logs,
            'perPage'         => $perPage,
            'perPageOptions'  => $perPageOptions,
            'maxTailLines'    => $this->maxTailLines,
        ]);
    }

    public function download(Request $request)
    {
        $file = trim(basename($request->query('file', '')));
        $path = $this->logDir . $file;

        abort_unless(
            $file !== '' &&
            Str::endsWith(Str::lower($file), '.log') &&
            File::isFile($path),
            404
        );

        return Response::download($path, $file, ['Content-Type' => 'text/plain']);
    }

    public function clear()
    {
        $today = Carbon::today()->format('Y-m-d');

        collect(File::glob($this->logDir . '*.log'))
            ->filter(fn($p) => !Str::contains($p, $today))
            ->each(fn($p) => File::delete($p));

        return back()->with('status', 'Alle älteren Log-Dateien wurden gelöscht.');
    }

    /**
     * Liest nur die letzten $maxLines Zeilen der Datei (Tail).
     */
    protected function getTailLines(string $path, int $maxLines = 1000): array
    {
        $file = new SplFileObject($path, 'r');
        $file->seek(PHP_INT_MAX);
        $lastLine = $file->key();

        // Wenn Datei kleiner als maxLines, lese komplett
        if ($lastLine < $maxLines) {
            $file->rewind();
            return iterator_to_array($file, false);
        }

        // Ansonsten setzte auf lastLine-maxLines, dann iteriere bis Ende
        $start = max(0, $lastLine - $maxLines);
        $file->seek($start);
        $lines = [];
        while (!$file->eof()) {
            $lines[] = $file->current();
            $file->next();
        }
        return $lines;
    }
}