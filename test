<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;

class LogViewerController extends Controller
{
    /**
     * Zeigt eine Liste aller Log-Files und paginiert deren Inhalt.
     *
     * @param  Request  $request
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        // 1) Alle Log-Dateien sortiert nach Datum (neueste zuerst)
        $logDir = storage_path('logs');
        $files  = collect(File::files($logDir))
            ->sortByDesc(fn ($f) => $f->getMTime());

        // 2) Aktive Datei bestimmen – Standard: die neueste
        $currentFile = $request->string('file')
            ->whenMissing(fn () => optional($files->first())->getFilename());

        abort_unless($currentFile && File::exists("$logDir/$currentFile"), 404);

        // 3) Inhalt einlesen und umgekehrt sortieren (neueste Zeile zuerst)
        $lines = collect(explode(PHP_EOL, File::get("$logDir/$currentFile")))
            ->filter()                 // leere Zeilen entfernen
            ->reverse()                // neueste ganz oben
            ->values();

        // ✨ Mini-Parser: Fehlerschwere* grob erkennen für CSS-Klassen
        $parsed = $lines->map(function (string $line) {
            // Suche nach „.ERROR:“, „.WARNING:“ usw.
            preg_match('/\.(?<lvl>[A-Z]+):/', $line, $m);
            return [
                'raw'   => $line,
                'level' => strtolower($m['lvl'] ?? 'info'), // fallback „info“
            ];
        });

        // 4) Pagination
        $perPage    = 100;
        $page       = LengthAwarePaginator::resolveCurrentPage();
        $paginated  = new LengthAwarePaginator(
            $parsed->forPage($page, $perPage),
            $parsed->count(),
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );

        return view('logviewer.index', [
            'files'       => $files,
            'currentFile' => $currentFile,
            'logs'        => $paginated,
        ]);
    }

    /**
     * Ermöglicht den Download einer Log-Datei.
     *
     * @param  string  $file
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    public function download(string $file)
    {
        $path = storage_path("logs/$file");

        abort_unless(
            File::exists($path) && str_ends_with($file, '.log'),
            404
        );

        return Response::download($path, $file, [
            'Content-Type' => 'text/plain',
        ]);
    }
}