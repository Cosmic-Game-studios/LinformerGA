<?php

namespace Modules\Admin\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Str;
use Carbon\Carbon;
use SplFileObject;

class ErrorLogController
{
    private string $logDir;
    private string $currentFile = '';
    private int $maxTailLines = 10000;

    public function __construct()
    {
        $this->logDir = rtrim(
            base_path('storage' . DIRECTORY_SEPARATOR . 'logs'),
            '\\/'
        ) . DIRECTORY_SEPARATOR;

        abort_unless(is_dir($this->logDir), 500, "Log-Verzeichnis fehlt: {$this->logDir}");
    }

    public function index(Request $request)
    {
        // 1) Alle log-Dateien lesen und sortieren
        $files = collect(File::glob($this->logDir . 'laravel-*.log'))
            ->map(fn($p) => new \SplFileInfo($p))
            ->sortByDesc(fn($f) => $f->getMTime())
            ->values();

        // 2) availableDates: [{date, size}, …] für Sidebar
        $availableDates = $files
            ->map(function($f) {
                $filename = $f->getFilename();
                // Verbessertes Parsing: laravel-2024-01-15.log
                if (preg_match('/laravel-(\d{4}-\d{2}-\d{2})\.log/', $filename, $matches)) {
                    $date = $matches[1];
                } else {
                    // Fallback für andere Formate
                    $date = substr($filename, 8, 10);
                }
                
                return [
                    'date' => $date,
                    'size' => $f->getSize(),
                ];
            })
            ->filter(fn($item) => !empty($item['date']) && preg_match('/^\d{4}-\d{2}-\d{2}$/', $item['date']))
            ->unique('date')
            ->sortByDesc('date')
            ->values();

        // 3) Aktuelles Datum / Datei
        $dateParam = $request->query('date', $availableDates->first()['date'] ?? null);
        if (! $dateParam || ! $availableDates->firstWhere('date', $dateParam)) {
            $dateParam = $availableDates->first()['date'] ?? null;
        }
        $this->currentFile = "laravel-{$dateParam}.log";

        // 4) Existenz-Check
        $path = $this->logDir . $this->currentFile;
        abort_unless(File::isFile($path), 404);

        // 5) per-page Options (MUSS mit Template übereinstimmen!)
        $perPageOptions = [50, 100, 200, 500];
        $perPage = (int) $request->query('per_page', 100);
        if (! in_array($perPage, $perPageOptions, true)) {
            $perPage = 100;
        }

        // 6) Tail-Lesen
        $rawLines = $this->getTailLines($path, $this->maxTailLines);
        $lines = collect($rawLines)
            ->map(fn($l) => trim($l))
            ->filter(fn($l) => !empty($l))
            ->reverse()
            ->values()
            ->map(function(string $line) {
                // Bessere Level-Erkennung
                $level = 'info'; // Default
                
                // Laravel Log-Format: [timestamp] environment.LEVEL: message
                if (preg_match('/\.\s*(ERROR|CRITICAL|EMERGENCY|ALERT)\s*:/i', $line)) {
                    $level = 'error';
                } elseif (preg_match('/\.\s*(WARNING|WARN)\s*:/i', $line)) {
                    $level = 'warning';
                } elseif (preg_match('/\.\s*(INFO|NOTICE|DEBUG)\s*:/i', $line)) {
                    $level = 'info';
                }
                
                return [
                    'raw'   => $line,
                    'level' => $level,
                ];
            });

        // 7) Pagination
        $page = LengthAwarePaginator::resolveCurrentPage();
        $logs = new LengthAwarePaginator(
            $lines->forPage($page, $perPage),
            $lines->count(),
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );

        return view('admin::errorlog.index', [
            'availableDates'  => $availableDates,
            'currentDate'     => $dateParam,
            'currentFile'     => $this->currentFile,
            'perPage'         => $perPage,
            'perPageOptions'  => $perPageOptions,
            'logs'            => $logs,
        ]);
    }

    public function download(Request $request)
    {
        $file = trim(basename($request->query('file', '')));
        $path = $this->logDir . $file;
        abort_unless(
            $file && Str::endsWith(Str::lower($file), '.log') && File::isFile($path),
            404
        );
        return Response::download($path, $file, ['Content-Type' => 'text/plain']);
    }

    public function clear()
    {
        $today = Carbon::today()->format('Y-m-d');
        collect(File::glob($this->logDir . '*.log'))
            ->filter(fn($p) => ! Str::contains($p, $today))
            ->each(fn($p) => File::delete($p));
        return back()->with('status', 'Alle älteren Log-Dateien wurden gelöscht.');
    }

    protected function getTailLines(string $path, int $maxLines = 1000): array
    {
        $file = new SplFileObject($path, 'r');
        $file->seek(PHP_INT_MAX);
        $last = $file->key();
        if ($last < $maxLines) {
            $file->rewind();
            return iterator_to_array($file, false);
        }
        $file->seek(max(0, $last - $maxLines));
        $lines = [];
        while (! $file->eof()) {
            $lines[] = $file->current();
            $file->next();
        }
        return $lines;
    }
}