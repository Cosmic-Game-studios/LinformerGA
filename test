<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;
use Carbon\Carbon;

class ErrorLogController extends Controller
{
    /**
     * Register the routes for this controller
     */
    public static function routes()
    {
        Route::middleware(['auth', 'can:admin'])->group(function () {
            Route::get('/admin/logs', [self::class, 'index'])->name('admin.logs');
            Route::get('/admin/logs/view/{filename}', [self::class, 'view'])->name('admin.logs.view');
            Route::post('/admin/logs/clear/{filename}', [self::class, 'clear'])->name('admin.logs.clear');
        });
    }

    /**
     * Display the log files overview
     */
    public function index(Request $request)
    {
        $logFiles = $this->getLogFiles();
        $selectedFile = $request->get('file');
        $logContent = null;
        $currentPage = 1;
        $totalPages = 1;

        if ($selectedFile && $this->isValidLogFile($selectedFile)) {
            $logData = $this->getLogContent($selectedFile, $request->get('page', 1));
            $logContent = $logData['content'];
            $currentPage = $logData['current_page'];
            $totalPages = $logData['total_pages'];
        }

        return view('admin.logs.index', compact(
            'logFiles',
            'selectedFile',
            'logContent',
            'currentPage',
            'totalPages'
        ));
    }

    /**
     * View specific log file content
     */
    public function view(Request $request, $filename)
    {
        if (!$this->isValidLogFile($filename)) {
            abort(404);
        }

        $logData = $this->getLogContent($filename, $request->get('page', 1));
        
        return response()->json([
            'content' => $logData['content'],
            'current_page' => $logData['current_page'],
            'total_pages' => $logData['total_pages'],
            'filename' => $filename
        ]);
    }

    /**
     * Clear specific log file
     */
    public function clear($filename)
    {
        if (!$this->isValidLogFile($filename)) {
            abort(404);
        }

        $filePath = storage_path("logs/{$filename}");
        File::put($filePath, '');

        return response()->json(['success' => true, 'message' => 'Log file cleared successfully']);
    }

    /**
     * Get all log files sorted by date descending
     */
    private function getLogFiles(): array
    {
        $logPath = storage_path('logs');
        
        if (!File::exists($logPath)) {
            return [];
        }

        $files = File::files($logPath);
        $logFiles = [];

        foreach ($files as $file) {
            $filename = $file->getFilename();
            
            // Only include .log files
            if (pathinfo($filename, PATHINFO_EXTENSION) !== 'log') {
                continue;
            }

            $logFiles[] = [
                'filename' => $filename,
                'path' => $file->getPathname(),
                'size' => $this->formatBytes($file->getSize()),
                'modified' => Carbon::createFromTimestamp($file->getMTime()),
                'date' => $this->extractDateFromFilename($filename)
            ];
        }

        // Sort by date descending (newest first)
        usort($logFiles, function ($a, $b) {
            return $b['modified']->timestamp - $a['modified']->timestamp;
        });

        return $logFiles;
    }

    /**
     * Get log content with pagination
     */
    private function getLogContent(string $filename, int $page = 1): array
    {
        $filePath = storage_path("logs/{$filename}");
        
        if (!File::exists($filePath)) {
            return ['content' => [], 'current_page' => 1, 'total_pages' => 1];
        }

        $content = File::get($filePath);
        $lines = explode("\n", $content);
        $lines = array_filter($lines, fn($line) => trim($line) !== '');

        // Pagination settings
        $perPage = 100;
        $totalLines = count($lines);
        $totalPages = max(1, ceil($totalLines / $perPage));
        $currentPage = max(1, min($page, $totalPages));
        $offset = ($currentPage - 1) * $perPage;

        // Get lines for current page
        $pageLines = array_slice($lines, $offset, $perPage);
        
        // Parse log entries
        $logEntries = $this->parseLogEntries($pageLines);

        return [
            'content' => $logEntries,
            'current_page' => $currentPage,
            'total_pages' => $totalPages,
            'total_lines' => $totalLines
        ];
    }

    /**
     * Parse log entries from lines
     */
    private function parseLogEntries(array $lines): array
    {
        $entries = [];
        $currentEntry = null;

        foreach ($lines as $line) {
            // Check if line starts with timestamp pattern [YYYY-MM-DD HH:MM:SS]
            if (preg_match('/^\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\]/', $line)) {
                // Save previous entry if exists
                if ($currentEntry) {
                    $entries[] = $currentEntry;
                }
                
                // Start new entry
                $currentEntry = [
                    'timestamp' => $this->extractTimestamp($line),
                    'level' => $this->extractLevel($line),
                    'message' => $line,
                    'context' => []
                ];
            } else if ($currentEntry) {
                // Add to current entry's context
                $currentEntry['context'][] = $line;
            }
        }

        // Add last entry
        if ($currentEntry) {
            $entries[] = $currentEntry;
        }

        return array_reverse($entries); // Show newest first
    }

    /**
     * Extract timestamp from log line
     */
    private function extractTimestamp(string $line): ?Carbon
    {
        if (preg_match('/^\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\]/', $line, $matches)) {
            return Carbon::createFromFormat('Y-m-d H:i:s', $matches[1]);
        }
        return null;
    }

    /**
     * Extract log level from log line
     */
    private function extractLevel(string $line): string
    {
        if (preg_match('/\]\s+(\w+)\./', $line, $matches)) {
            return strtolower($matches[1]);
        }
        return 'info';
    }

    /**
     * Extract date from filename
     */
    private function extractDateFromFilename(string $filename): ?Carbon
    {
        if (preg_match('/(\d{4}-\d{2}-\d{2})/', $filename, $matches)) {
            return Carbon::createFromFormat('Y-m-d', $matches[1]);
        }
        return null;
    }

    /**
     * Check if filename is a valid log file
     */
    private function isValidLogFile(string $filename): bool
    {
        $filePath = storage_path("logs/{$filename}");
        return File::exists($filePath) && 
               pathinfo($filename, PATHINFO_EXTENSION) === 'log' &&
               !str_contains($filename, '..') &&
               !str_contains($filename, '/');
    }

    /**
     * Format bytes to human readable format
     */
    private function formatBytes(int $bytes): string
    {
        if ($bytes >= 1073741824) {
            return number_format($bytes / 1073741824, 2) . ' GB';
        } elseif ($bytes >= 1048576) {
            return number_format($bytes / 1048576, 2) . ' MB';
        } elseif ($bytes >= 1024) {
            return number_format($bytes / 1024, 2) . ' KB';
        } else {
            return $bytes . ' bytes';
        }
    }
}