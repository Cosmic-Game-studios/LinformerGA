<?php

namespace Modules\Admin\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Carbon\Carbon;

class ErrorLogController
{
    /** Pfad zu den Log-Dateien */
    private string $logDir;

    public function __construct()
    {
        // üëâ passe das an, falls deine Logs anderswo liegen
        $this->logDir = storage_path('logs');
    }

    /**
     * Anzeige der Logs (neueste Tagesdatei als Default).
     */
    public function index(Request $request)
    {
        // -- 1) Dateiliste nach Datum im Dateinamen sortieren (YYYY-MM-DD)
        $files = collect(File::files($this->logDir))
            ->filter(fn ($f) => preg_match('/laravel-\d{4}-\d{2}-\d{2}\.log$/', $f->getFilename()))
            ->sortByDesc(function ($f) {
                return Carbon::createFromFormat('Y-m-d', substr($f->getFilename(), 8, 10));
            })
            ->values();

        // -- 2) Datei bestimmen (Default: neueste)
        $currentFile = $request->string('file')
            ->whenMissing(fn () => optional($files->first())->getFilename());

        abort_unless($currentFile && File::exists("{$this->logDir}/{$currentFile}"), 404);

        // -- 3) Zeilen einlesen (leer ‚Üí raus) & umdrehen ‚áí neueste Zeile zuerst
        $lines = collect(explode(PHP_EOL, File::get("{$this->logDir}/{$currentFile}")))
            ->filter()
            ->reverse()
            ->values();

        // -- 4) Level grob erkennen (ERROR, WARNING, CRITICAL ‚Ä¶)
        $parsed = $lines->map(function (string $line) {
            preg_match('/\.(?<lvl>[A-Z]+):/', $line, $m);
            return [
                'raw'   => $line,
                'level' => strtolower($m['lvl'] ?? 'info'),
            ];
        });

        // -- 5) Pagination
        $perPage   = 100;
        $page      = LengthAwarePaginator::resolveCurrentPage();
        $paginated = new LengthAwarePaginator(
            $parsed->forPage($page, $perPage),
            $parsed->count(),
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );

        return view('logviewer.index', [
            'files'       => $files,
            'currentFile' => $currentFile,
            'logs'        => $paginated,
        ]);
    }

    /**
     * Download einer Log-Datei.
     */
    public function download(Request $request)
    {
        $file = $request->string('file');
        $path = "{$this->logDir}/{$file}";

        abort_unless(
            $file && File::exists($path) && str_ends_with($file, '.log'),
            404
        );

        return Response::download($path, $file, ['Content-Type' => 'text/plain']);
    }

    /**
     * L√∂scht **alle** Log-Dateien au√üer der aktuellen Tagesdatei
     * (damit die Anwendung weiter schreiben kann).
     */
    public function clear()
    {
        $today = Carbon::today()->format('Y-m-d');

        collect(File::files($this->logDir))
            ->reject(fn ($f) => str_contains($f->getFilename(), $today))
            ->each(fn ($f) => File::delete($f->getRealPath()));

        return back()->with('status', 'Alte Log-Dateien wurden erfolgreich gel√∂scht.');
    }
}