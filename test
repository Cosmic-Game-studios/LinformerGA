<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use Carbon\Carbon;

class ErrorLogViewController extends Controller
{
    public function index(Request $request, $filename = null)
    {
        $logPath = storage_path('logs');
        
        // Alle .log-Dateien aus dem logs-Verzeichnis abrufen
        $logFiles = collect(File::files($logPath))
            ->filter(function ($file) {
                return $file->getExtension() === 'log';
            })
            ->map(function ($file) {
                return [
                    'name' => $file->getFilename(),
                    'path' => $file->getPathname(),
                    'size' => $file->getSize(),
                    'modified' => Carbon::createFromTimestamp($file->getMTime()),
                    'basename' => pathinfo($file->getFilename(), PATHINFO_FILENAME)
                ];
            })
            ->sortByDesc('modified')
            ->values();

        // Wenn keine Log-Dateien vorhanden sind
        if ($logFiles->isEmpty()) {
            return view('error-log-viewer', [
                'logFiles' => collect(),
                'selectedFile' => null,
                'logContent' => null,
                'error' => 'Keine Log-Dateien gefunden.'
            ]);
        }

        // Dateiauswahl: Entweder die angegebene Datei oder die neueste
        $selectedFile = null;
        if ($filename) {
            $selectedFile = $logFiles->firstWhere('name', $filename);
            if (!$selectedFile) {
                return view('error-log-viewer', [
                    'logFiles' => $logFiles,
                    'selectedFile' => null,
                    'logContent' => null,
                    'error' => "Log-Datei '{$filename}' nicht gefunden."
                ]);
            }
        } else {
            $selectedFile = $logFiles->first();
        }

        // Log-Inhalt laden
        $logContent = null;
        $error = null;
        
        try {
            if (File::exists($selectedFile['path'])) {
                $rawContent = File::get($selectedFile['path']);
                
                // Log-Einträge parsen und strukturieren
                $logContent = $this->parseLogContent($rawContent);
            } else {
                $error = 'Log-Datei konnte nicht gelesen werden.';
            }
        } catch (\Exception $e) {
            $error = 'Fehler beim Lesen der Log-Datei: ' . $e->getMessage();
        }

        return view('error-log-viewer', [
            'logFiles' => $logFiles,
            'selectedFile' => $selectedFile,
            'logContent' => $logContent,
            'error' => $error
        ]);
    }

    private function parseLogContent($content)
    {
        // Laravel Log-Format parsen
        $pattern = '/^\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\] (\w+)\.(\w+): (.+)$/m';
        
        $lines = explode("\n", $content);
        $entries = [];
        $currentEntry = null;
        
        foreach ($lines as $line) {
            if (preg_match($pattern, $line, $matches)) {
                // Neuer Log-Eintrag
                if ($currentEntry) {
                    $entries[] = $currentEntry;
                }
                
                $currentEntry = [
                    'timestamp' => $matches[1],
                    'environment' => $matches[2],
                    'level' => $matches[3],
                    'message' => $matches[4],
                    'context' => '',
                    'level_class' => $this->getLevelClass($matches[3])
                ];
            } elseif ($currentEntry && !empty(trim($line))) {
                // Kontext-Zeile zu aktuellem Eintrag hinzufügen
                $currentEntry['context'] .= $line . "\n";
            }
        }
        
        // Letzten Eintrag hinzufügen
        if ($currentEntry) {
            $entries[] = $currentEntry;
        }
        
        return array_reverse($entries); // Neueste zuerst
    }

    private function getLevelClass($level)
    {
        $classes = [
            'emergency' => 'danger',
            'alert' => 'danger',
            'critical' => 'danger',
            'error' => 'danger',
            'warning' => 'warning',
            'notice' => 'info',
            'info' => 'info',
            'debug' => 'secondary'
        ];
        
        return $classes[strtolower($level)] ?? 'secondary';
    }
}