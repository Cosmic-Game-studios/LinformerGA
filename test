<?php

namespace Modules\Admin\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Str;
use Carbon\Carbon;

class ErrorLogController
{
    private string $logDir;
    private string $currentFile = '';

    public function __construct()
    {
        $this->logDir = rtrim(
            base_path('storage' . DIRECTORY_SEPARATOR . 'logs'),
            '\\/'
        ) . DIRECTORY_SEPARATOR;

        abort_unless(is_dir($this->logDir), 500, "Log-Verzeichnis fehlt: {$this->logDir}");
    }

    public function index(Request $request)
    {
        // 1) Dateien listen
        $files = collect(File::glob($this->logDir . '*.log'))
            ->map(fn($p) => new \SplFileInfo($p))
            ->sortByDesc(fn($f) => $f->getMTime())
            ->values();

        // 2) aktuelle Datei
        $this->currentFile = trim(basename($request->query('file', '')));
        if ($this->currentFile === '' && $files->isNotEmpty()) {
            $this->currentFile = $files->first()->getFilename();
        }

        // 3) Existenz-Check
        $path = $this->logDir . $this->currentFile;
        abort_unless(File::isFile($path), 404);

        // 4) per-page-Optionen
        $perPageOptions = [50, 100, 200, 500];
        $perPage = (int) $request->query('per_page', 100);
        if (! in_array($perPage, $perPageOptions, true)) {
            $perPage = 100;
        }

        // 5) Logs lesen & vorbereiten
        $lines = collect(preg_split('/\r?\n/', File::get($path)))
            ->filter()
            ->reverse()
            ->values()
            ->map(fn(string $line) => [
                'raw'   => $line,
                'level' => strtolower( (preg_match('/\.(?<lvl>[A-Z]+):/', $line, $m) ? $m['lvl'] : 'info') ),
            ]);

        // 6) Pagination
        $page = LengthAwarePaginator::resolveCurrentPage();
        $paginated = new LengthAwarePaginator(
            $lines->forPage($page, $perPage),
            $lines->count(),
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );

        return view('admin::errorlog.index', [
            'files'           => $files,
            'currentFile'     => $this->currentFile,
            'logs'            => $paginated,
            'perPage'         => $perPage,
            'perPageOptions'  => $perPageOptions,
        ]);
    }

    public function download(Request $request)
    {
        $file = trim(basename($request->query('file', '')));
        $path = $this->logDir . $file;

        abort_unless(
            $file !== '' &&
            Str::endsWith(Str::lower($file), '.log') &&
            File::isFile($path),
            404
        );

        return Response::download($path, $file, ['Content-Type' => 'text/plain']);
    }

    public function clear()
    {
        $today = Carbon::today()->format('Y-m-d');

        collect(File::glob($this->logDir . '*.log'))
            ->filter(fn($p) => ! Str::contains($p, $today))
            ->each(fn($p) => File::delete($p));

        return back()->with('status', 'Alle älteren Log-Dateien wurden gelöscht.');
    }
}