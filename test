<?php

namespace App\Http\Livewire;

use Livewire\Component;
use Livewire\WithPagination;
use Illuminate\Support\Facades\File;
use Carbon\Carbon;

class ErrorLogViewer extends Component
{
    use WithPagination;

    public $currentFile = '';
    public $search = '';
    public $level = 'all';
    public $showModal = false;
    public $modalContent = '';
    public $modalTitle = '';
    public $autoRefresh = false;
    public $refreshInterval = 5;

    protected $paginationTheme = 'bootstrap';
    protected $logPath;
    protected $queryString = ['currentFile', 'search', 'level'];

    public function mount()
    {
        $this->logPath = storage_path('logs');
        
        // Set default file if not set
        if (empty($this->currentFile)) {
            $files = $this->getLogFiles();
            if (!empty($files)) {
                $this->currentFile = $files[0]['name'];
            }
        }
    }

    public function render()
    {
        $files = $this->getLogFiles();
        $logs = $this->getLogsFromFile();
        $currentFileInfo = collect($files)->firstWhere('name', $this->currentFile);

        return view('livewire.error-log-viewer', [
            'files' => $files,
            'logs' => $logs,
            'currentFileInfo' => $currentFileInfo
        ]);
    }

    public function updatedSearch()
    {
        $this->resetPage();
    }

    public function updatedLevel()
    {
        $this->resetPage();
    }

    public function selectFile($filename)
    {
        $this->currentFile = $filename;
        $this->resetPage();
    }

    public function downloadFile($filename)
    {
        $path = $this->logPath . '/' . $filename;
        
        if (!File::exists($path)) {
            $this->dispatchBrowserEvent('notify', [
                'type' => 'error',
                'message' => 'Log-Datei nicht gefunden'
            ]);
            return;
        }

        return response()->download($path);
    }

    public function deleteFile($filename)
    {
        $path = $this->logPath . '/' . $filename;
        
        if (!File::exists($path)) {
            $this->dispatchBrowserEvent('notify', [
                'type' => 'error',
                'message' => 'Datei nicht gefunden'
            ]);
            return;
        }

        File::delete($path);
        
        // If current file was deleted, select another
        if ($this->currentFile === $filename) {
            $files = $this->getLogFiles();
            $this->currentFile = !empty($files) ? $files[0]['name'] : '';
        }

        $this->dispatchBrowserEvent('notify', [
            'type' => 'success',
            'message' => 'Log-Datei gelÃ¶scht'
        ]);
    }

    public function clearFile($filename)
    {
        $path = $this->logPath . '/' . $filename;
        
        if (!File::exists($path)) {
            $this->dispatchBrowserEvent('notify', [
                'type' => 'error',
                'message' => 'Datei nicht gefunden'
            ]);
            return;
        }

        File::put($path, '');
        
        $this->dispatchBrowserEvent('notify', [
            'type' => 'success',
            'message' => 'Log-Datei geleert'
        ]);
    }

    public function showLogDetails($log)
    {
        $this->modalTitle = 'Log Details - ' . strtoupper($log['level']);
        $this->modalContent = $log['raw_message'];
        $this->showModal = true;
    }

    public function closeModal()
    {
        $this->showModal = false;
        $this->modalContent = '';
        $this->modalTitle = '';
    }

    public function toggleAutoRefresh()
    {
        $this->autoRefresh = !$this->autoRefresh;
        
        if ($this->autoRefresh) {
            $this->dispatchBrowserEvent('start-refresh', ['interval' => $this->refreshInterval * 1000]);
        } else {
            $this->dispatchBrowserEvent('stop-refresh');
        }
    }

    protected function getLogFiles()
    {
        $files = [];
        
        if (!File::exists($this->logPath)) {
            return $files;
        }
        
        $logFiles = File::glob($this->logPath . '/*.log');
        
        foreach ($logFiles as $file) {
            $files[] = [
                'name' => basename($file),
                'size' => $this->formatBytes(File::size($file)),
                'size_raw' => File::size($file),
                'last_modified' => Carbon::createFromTimestamp(File::lastModified($file))->format('Y-m-d H:i:s'),
                'last_modified_human' => Carbon::createFromTimestamp(File::lastModified($file))->diffForHumans(),
                'path' => $file
            ];
        }
        
        // Sort by last modified desc
        usort($files, function($a, $b) {
            return strcmp($b['last_modified'], $a['last_modified']);
        });
        
        return $files;
    }

    protected function getLogsFromFile()
    {
        if (empty($this->currentFile)) {
            return collect([]);
        }

        $path = $this->logPath . '/' . $this->currentFile;
        
        if (!File::exists($path)) {
            return collect([]);
        }
        
        $content = File::get($path);
        $logs = [];
        
        // Laravel log pattern
        $pattern = '/\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\](?:.*?)\.(\w+):(.*?)(?=\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\]|$)/s';
        
        preg_match_all($pattern, $content, $matches, PREG_SET_ORDER);
        
        foreach ($matches as $match) {
            $logLevel = strtolower($match[2]);
            $message = trim($match[3]);
            
            // Filter by level
            if ($this->level !== 'all' && $logLevel !== $this->level) {
                continue;
            }
            
            // Filter by search
            if ($this->search && stripos($message, $this->search) === false) {
                continue;
            }
            
            // Extract stack trace info
            $stackTrace = null;
            if (preg_match('/Stack trace:(.*?)(?:\[|\z)/s', $message, $stackMatch)) {
                $stackTrace = trim($stackMatch[1]);
            }
            
            $logs[] = [
                'timestamp' => $match[1],
                'timestamp_human' => Carbon::parse($match[1])->diffForHumans(),
                'level' => $logLevel,
                'message' => $this->formatMessage($message),
                'raw_message' => $message,
                'stack_trace' => $stackTrace,
                'has_stack' => !is_null($stackTrace)
            ];
        }
        
        // Sort by timestamp desc
        usort($logs, function($a, $b) {
            return strcmp($b['timestamp'], $a['timestamp']);
        });
        
        // Convert to collection and paginate
        return collect($logs)->paginate(50);
    }

    protected function formatMessage($message)
    {
        // Remove stack trace for preview
        $message = preg_replace('/Stack trace:.*$/s', '', $message);
        
        // Truncate long messages
        if (strlen($message) > 300) {
            $message = substr($message, 0, 300) . '...';
        }
        
        // Highlight important patterns
        $patterns = [
            // File paths
            '/([A-Za-z]:)?([\/\\\\][\w.-]+)+\.(php|blade\.php|js|css)/' => '<code class="text-info">$0</code>',
            // Line numbers
            '/line (\d+)/' => 'line <strong>$1</strong>',
            // Class names
            '/([A-Z][\w\\\\]+Exception|[A-Z][\w\\\\]+Error)/' => '<strong class="text-danger">$1</strong>',
            // IP addresses
            '/\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b/' => '<code>$0</code>',
            // URLs
            '/https?:\/\/[^\s]+/' => '<a href="$0" target="_blank" class="text-primary">$0</a>'
        ];
        
        foreach ($patterns as $pattern => $replacement) {
            $message = preg_replace($pattern, $replacement, $message);
        }
        
        return $message;
    }

    protected function formatBytes($bytes, $precision = 2)
    {
        $units = ['B', 'KB', 'MB', 'GB', 'TB'];
        
        for ($i = 0; $bytes > 1024; $i++) {
            $bytes /= 1024;
        }
        
        return round($bytes, $precision) . ' ' . $units[$i];
    }

    public function getLevelClass($level)
    {
        $classes = [
            'emergency' => 'danger',
            'alert' => 'danger',
            'critical' => 'danger',
            'error' => 'danger',
            'warning' => 'warning',
            'notice' => 'info',
            'info' => 'primary',
            'debug' => 'secondary'
        ];
        
        return $classes[$level] ?? 'secondary';
    }

    public function getLevelIcon($level)
    {
        $icons = [
            'emergency' => 'bi-exclamation-octagon-fill',
            'alert' => 'bi-exclamation-triangle-fill',
            'critical' => 'bi-x-circle-fill',
            'error' => 'bi-x-circle',
            'warning' => 'bi-exclamation-triangle',
            'notice' => 'bi-info-circle',
            'info' => 'bi-info',
            'debug' => 'bi-bug'
        ];
        
        return $icons[$level] ?? 'bi-file-text';
    }
}